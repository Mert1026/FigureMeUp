@model IEnumerable<FigureMeUp.Data.Models.Figure>
@{
    ViewData["Title"] = "All Figures";
     var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="fw-bold text-primary"><i class="fas fa-robot me-2 text-primary fw-bold"></i>All Figures</h2>
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-action="Create" class="btn btn-primary bg-primary border-0">
            <i class="fas fa-plus me-2"></i>Add New Figure
        </a>
    }
</div>

@if (Model.Any())
{
    <div class="row">
        @foreach (var figure in Model)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card shadow-sm h-100 bg-body">
                    @if (figure.ImageUrls.Any())
                    {
                        <img src="@figure.ImageUrls.First()" class="card-img-top" alt="@figure.Name" style="height: 200px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="card-img-top d-flex align-items-center justify-content-center bg-light" style="height: 200px;">
                            <i class="fas fa-robot fa-3x text-muted"></i>
                        </div>
                    }
                    
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@figure.Name</h5>
                        <p class="card-text flex-grow-1">@figure.Description.Substring(0, Math.Min(100, figure.Description.Length))@(figure.Description.Length > 100 ? "..." : "")</p>
                        
                        <div class="mb-2">
                            @if(figure.Rarity.Name == "Legendary")
                            {
                                <span class="badge bg-warning text-dark">@figure.Rarity.Name</span>
                            }
                            else if(figure.Rarity.Name == "Epic")
                            {
                                <span class="badge bg-danger text-white">@figure.Rarity.Name</span>
                            }
                            else if(figure.Rarity.Name == "Rare")
                            {
                                <span class="badge bg-info text-dark">@figure.Rarity.Name</span>
                            }
                            else if(figure.Rarity.Name == "Uncommon")
                            {
                                <span class="badge bg-secondary text-white">@figure.Rarity.Name</span>
                            }
                            else
                            {
                                <span class="badge bg-light text-dark">@figure.Rarity.Name</span>
                            }
                           
                            @* <span class="badge bg-info text-dark">@figure.Rarity.Name</span> *@
                            @if (figure.Hashtags.Any())
                            {
                                @foreach (var hashtag in figure.Hashtags.Take(2))
                                {
                                    <span class="badge bg-secondary">#@hashtag.Name</span>
                                }
                            }
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mt-auto mb-2">
                            <small class="text-muted">
                                <i class="fas fa-user me-1"></i>@(figure.Owner?.UserName ?? "Unknown")
                            </small>
                            <small class="text-muted">
                                <i class="fas fa-calendar me-1"></i>@figure.LastChanged.ToString("MMM dd")
                            </small>
                        </div>

                        <!-- Like Button and Counter with AJAX -->
                        <div class="d-flex align-items-center justify-content-between mb-3">
                            @if (User.Identity.IsAuthenticated)
                            {
                                <button type="button"
                                        class="btn btn-sm figure-like-btn @(figure.LikedByUsersIds.Contains(currentUserId ?? "") ? "btn-danger" : "btn-outline-danger")"
                                        data-figure-id="@figure.Id"
                                        data-is-liked="@(figure.LikedByUsersIds.Contains(currentUserId ?? "").ToString().ToLower())">
                                    <i class="fas fa-heart me-1"></i>
                                    <span class="like-text">@(figure.LikedByUsersIds.Contains(currentUserId ?? "") ? "Unlike" : "Like")</span>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-danger btn-sm" disabled>
                                    <i class="fas fa-heart me-1"></i>Like
                                </button>
                            }
                            
                            <span class="text-muted small figure-like-count" data-figure-id="@figure.Id">
                                <i class="fas fa-heart text-danger me-1"></i>
                                <strong class="count-number">@(figure.LikesCount)</strong>
                                likes
                            </span>
                        </div>
                        
                        <div class="mt-2">
                            <a asp-action="Details" asp-route-id="@figure.Id" class="btn btn-primary btn-sm bg-primary border-0">
                                <i class="fas fa-eye me-1"></i>View Details
                            </a>
                            
                            @if (User.Identity.IsAuthenticated 
                            && (figure.OwnerId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                            || User.IsInRole("Admin")))
                            {
                                <a asp-action="Edit" asp-route-id="@figure.Id" class="btn btn-outline-secondary btn-sm">
                                    <i class="fas fa-edit me-1"></i>Edit
                                </a>
                                <button type="button" class="btn btn-outline-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal@(figure.Id)">
                                    <i class="fas fa-trash me-1"></i>Delete
                                </button>
                                
                                <!-- Delete Confirmation Modal -->
                                <div class="modal fade" id="deleteModal@(figure.Id)" tabindex="-1" aria-labelledby="deleteModalLabel@(figure.Id)" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="deleteModalLabel@(figure.Id)">Confirm Delete</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                Are you sure you want to delete the figure "<strong>@figure.Name</strong>"? This action cannot be undone.
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                <form asp-action="Delete" asp-route-id="@figure.Id" method="post" class="d-inline">
                                                    <button type="submit" class="btn btn-danger">
                                                        <i class="fas fa-trash me-1"></i>Delete
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-robot fa-5x text-white mb-4"></i>
        <h3 class="text-white">No Figures Found</h3>
        <p class="text-white">Be the first to share your amazing figure collection!</p>
        @if (User.Identity.IsAuthenticated)
        {
            <a asp-action="Create" class="btn btn-primary btn-lg bg-primary border-0">
                <i class="fas fa-plus me-2"></i>Add Your First Figure
            </a>
        }
        else
        {
            <a asp-area="Identity" asp-page="/Account/Register" class="btn btn-primary btn-lg bg-primary border-0">
                <i class="fas fa-user-plus me-2"></i>Join to Add Figures
            </a>
        }
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add click handlers to all figure like buttons
            document.querySelectorAll('.figure-like-btn').forEach(button => {
                button.addEventListener('click', function() {
                    toggleFigureLike(this);
                });
            });
        });

        function toggleFigureLike(button) {
            const figureId = button.getAttribute('data-figure-id');
            const isLiked = button.getAttribute('data-is-liked') === 'true';

            console.log('Toggle like called for figure:', figureId, 'Currently liked:', isLiked);

            // Validate figure ID on client side
            if (!figureId || figureId.trim() === '') {
                showNotification('error', 'Invalid figure ID');
                return;
            }

            // Disable button to prevent multiple clicks
            const originalContent = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';

            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                console.error('CSRF token not found');
                button.disabled = false;
                button.innerHTML = originalContent;
                showNotification('error', 'Security token not found. Please refresh the page.');
                return;
            }

            // Use POST body with form data
            const url = '@Url.Action("ToggleLike", "Figures")';
            console.log('Sending request to:', url);
            console.log('Figure ID (Guid string):', figureId);

            // Create form data
            const formData = new FormData();
            formData.append('id', figureId);
            formData.append('__RequestVerificationToken', token);

            // Make AJAX call
            fetch(url, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: formData
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                if (!response.ok) {
                    return response.text().then(text => {
                        console.log('Error response body:', text);
                        
                        // Try to parse as JSON first (in case server returns JSON error)
                        try {
                            const jsonError = JSON.parse(text);
                            if (jsonError.message) {
                                throw new Error(jsonError.message);
                            }
                        } catch (e) {
                            // If not JSON, parse HTML error page
                            const parser = new DOMParser();
                            const htmlDoc = parser.parseFromString(text, 'text/html');
                            const title = htmlDoc.querySelector('title')?.textContent || 'Unknown Error';
                            const errorMessage = htmlDoc.querySelector('.error-message, .exception-message, h1')?.textContent || `HTTP ${response.status} Error`;
                            
                            throw new Error(`${title}: ${errorMessage}`);
                        }
                        
                        throw new Error(`HTTP ${response.status}: ${text.substring(0, 100)}...`);
                    });
                }

                const contentType = response.headers.get('content-type');
                console.log('Content type:', contentType);

                if (!contentType || !contentType.includes('application/json')) {
                    return response.text().then(text => {
                        console.log('Non-JSON response:', text);
                        throw new Error('Server did not return JSON response. Please check if the action exists and returns JSON.');
                    });
                }

                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);

                if (data.success) {
                    // Update button state using data from server
                    button.setAttribute('data-is-liked', data.isLiked.toString());

                    // Update button appearance and text
                    if (data.isLiked) {
                        button.className = 'btn btn-sm figure-like-btn btn-danger';
                    } else {
                        button.className = 'btn btn-sm figure-like-btn btn-outline-danger';
                    }

                    // Update button text - check if like-text span exists
                    const likeTextSpan = button.querySelector('.like-text');
                    if (likeTextSpan) {
                        likeTextSpan.textContent = data.isLiked ? 'Unlike' : 'Like';
                    } else {
                        // If span doesn't exist, update the entire button content
                        button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${data.isLiked ? 'Unlike' : 'Like'}</span>`;
                    }

                    // Update like count with server data
                    const likeCountSpan = document.querySelector(`.figure-like-count[data-figure-id="${figureId}"] .count-number`);
                    if (likeCountSpan) {
                        likeCountSpan.textContent = data.likesCount;
                    } else {
                        console.warn('Like count span not found for figure:', figureId);
                    }

                    // Show success notification
                    showNotification('success', data.message);
                } else {
                    console.error('Server returned error:', data.message);
                    // Show error notification
                    showNotification('error', data.message || 'Failed to toggle like');
                }

                // Re-enable button with original structure
                button.disabled = false;
                // Restore the original button structure if it was lost
                if (!button.querySelector('.like-text')) {
                    const currentIsLiked = button.getAttribute('data-is-liked') === 'true';
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${currentIsLiked ? 'Unlike' : 'Like'}</span>`;
                } else {
                    button.innerHTML = originalContent;
                }

                // Update button text again to ensure consistency
                const likeTextSpan = button.querySelector('.like-text');
                if (likeTextSpan) {
                    likeTextSpan.textContent = data.isLiked ? 'Unlike' : 'Like';
                } else {
                    // If span doesn't exist, update the entire button content
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${data.isLiked ? 'Unlike' : 'Like'}</span>`;
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                console.error('Error details:', error.message);

                // Re-enable button on error with proper structure
                button.disabled = false;
                // Restore the original button structure
                if (!button.querySelector('.like-text')) {
                    const currentIsLiked = button.getAttribute('data-is-liked') === 'true';
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${currentIsLiked ? 'Unlike' : 'Like'}</span>`;
                } else {
                    button.innerHTML = originalContent;
                }

                // Show error notification with more details
                showNotification('error', error.message);
            });
        }

        // Helper function to show notifications
        function showNotification(type, message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            // Add to page
            document.body.appendChild(notification);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }
    </script>
}

@* Add CSRF token for AJAX requests *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>