@model IEnumerable<FigureMeUp.Data.Models.Post>
@{
    ViewData["Title"] = "All Posts";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="fw-bold text-primary"><i class="fas fa-newspaper me-2 text-primary fw-bold"></i>All Posts</h2>
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-action="Create" class="btn btn-primary bg-primary border-0">
            <i class="fas fa-plus me-2"></i>Create New Post
        </a>
    }
</div>

<!-- Filter Controls -->
<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="row justify-content-center align-items-center">
            <div class="col-md-3">
                <input type="text" class="form-control" id="searchAuthor" placeholder="Search by author...">
            </div>
            <div class="col-md-3">
                <input type="text" class="form-control" id="searchTitle" placeholder="Search by title...">
            </div>
            <div class="col-md-2">
                <select class="form-select" id="sortBy">
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                    <option value="mostLiked">Most Liked</option>
                    <option value="mostViewed">Most Viewed</option>
                    <option value="title">Title A-Z</option>
                </select>
            </div>
            <div class="col-md-2">
                <select class="form-select" id="hasImages">
                    <option value="">All Posts</option>
                    <option value="withImages">With Images</option>
                    <option value="textOnly">Text Only</option>
                </select>
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary bg-primary border-0 w-100" onclick="applyFilters()">
                    <i class="fas fa-filter me-2"></i>Filter
                </button>
            </div>
        </div>
    </div>
</div>

@if (Model.Any())
{
    <div class="row justify-content-center" id="postsContainer">
        @foreach (var post in Model)
        {
            <div class="col-lg-6 mb-4 post-card border-0"
                 data-author="@(post.Publisher?.UserName ?? "Unknown")"
                 data-title="@post.Title.ToLower()"
                 data-likes="@post.LikesCount"
                 data-views="@post.ViewsCount"
                 data-date="@post.CreatedAt.Ticks"
                 data-has-images="@(post.ImageUrls.Any() ? "true" : "false")">
                <div class="card shadow-sm h-100 bg-body">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div class="flex-grow-1">
                                <h4 class="card-title mb-2 text-black">
                                    <a asp-action="Details" asp-route-id="@post.Id" class="text-decoration-none text-black">
                                        @post.Title
                                    </a>
                                </h4>
                                <div class="d-flex align-items-center text-muted small mb-2">
                                    <i class="fas fa-user me-1"></i>
                                    <span class="me-3">@(post.Publisher?.UserName ?? "Unknown")</span>
                                    <i class="fas fa-calendar me-1"></i>
                                    <span class="me-3">@post.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                            @if (User.Identity.IsAuthenticated
                                                && (post.PublisherId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                                                || User.IsInRole("Admin")))
                            {
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item" asp-action="Edit" asp-route-id="@post.Id">
                                                <i class="fas fa-edit me-2"></i>Edit
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item text-danger" href="Delete/@post.Id" data-bs-toggle="modal" data-bs-target="#deletePostModal@(post.Id)">
                                                <i class="fas fa-trash me-2"></i>Delete
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>

                        <p class="card-text">@post.Content</p>

                        @if (post.ImageUrls.Any())
                        {
                            <div class="row mb-3">
                                @if (post.ImageUrls.Count() == 1)
                                {
                                    <div class="col-12">
                                        <img src="@post.ImageUrls.First()" class="img-fluid rounded" alt="Post image" style="max-height: 300px; width: 100%; object-fit: cover;">
                                    </div>
                                }
                                else
                                {
                                    @foreach (var imageUrl in post.ImageUrls.Take(2))
                                    {
                                        <div class="col-6 mb-2">
                                            <img src="@imageUrl" class="img-fluid rounded" alt="Post image" style="height: 120px; width: 100%; object-fit: cover;">
                                        </div>
                                    }
                                    @if (post.ImageUrls.Count() > 2)
                                    {
                                        <div class="col-12 text-center mt-2">
                                            <small class="text-muted">+@(post.ImageUrls.Count() - 2) more images</small>
                                        </div>
                                    }
                                }
                            </div>
                        }

                        @if (post.Hashtags.Any())
                        {
                            <div class="mb-3">
                                @foreach (var hashtag in post.Hashtags)
                                {
                                    <span class="badge bg-secondary me-1">#@hashtag.Name</span>
                                }
                            </div>
                        }

                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <a asp-action="Details" asp-route-id="@post.Id" class="btn btn-primary btn-sm me-2 bg-primary border-0">
                                    <i class="fas fa-eye me-1"></i>View Details
                                </a>

                                @if (User.Identity.IsAuthenticated)
                                {
                                    <button type="button"
                                            class="btn btn-sm me-2 like-btn @(post.LikedByUsersIds.Contains(currentUserId ?? "") ? "btn-danger" : "btn-outline-danger")"
                                            data-post-id="@post.Id"
                                            data-is-liked="@(post.LikedByUsersIds.Contains(currentUserId ?? "").ToString().ToLower())">
                                        <i class="fas fa-heart me-1"></i>
                                        <span class="like-text">@(post.LikedByUsersIds.Contains(currentUserId ?? "") ? "Unlike" : "Like")</span>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-danger btn-sm me-2" disabled>
                                        <i class="fas fa-heart me-1"></i>Like
                                    </button>
                                }

                                <span class="text-muted small like-count" data-post-id="@post.Id">
                                    <i class="fas fa-heart text-danger me-1"></i>
                                    <strong class="count-number">@(post.LikesCount)</strong>
                                    likes
                                </span>
                            </div>
                            <small class="text-muted">
                                <i class="fas fa-eye me-1"></i>@(post.ViewsCount) views
                            </small>
                        </div>
                    </div>
                </div>

                @if (User.Identity.IsAuthenticated && (post.PublisherId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value || User.IsInRole("Admin")))
                {
                    <!-- Delete Confirmation Modal -->
                    <div class="modal fade" id="deletePostModal@(post.Id)" tabindex="-1" aria-labelledby="deletePostModalLabel@(post.Id)" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deletePostModalLabel@(post.Id)">Confirm Delete</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to delete the post "<strong>@post.Title</strong>"? This action cannot be undone.
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <form asp-action="Delete" asp-route-id="@post.Id" method="post" class="d-inline">
                                        <button type="submit" class="btn btn-danger">
                                            <i class="fas fa-trash me-1"></i>Delete
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5 text-white">
        <i class="fas fa-newspaper fa-5x mb-4 text-white"></i>
        <h3 class="text-white">No Posts Yet</h3>
        <p class="text-white">Be the first to share something with the community!</p>
        @if (User.Identity.IsAuthenticated)
        {
            <a asp-action="Create" class="btn btn-primary btn-lg bg-primary border-0">
                <i class="fas fa-plus me-2"></i>Create Your First Post
            </a>
        }

    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.like-btn').forEach(button => {
                button.addEventListener('click', function() {
                    toggleLike(this);
                });
            });
        });

        function applyFilters() {
            const author = document.getElementById('searchAuthor').value.toLowerCase();
            const title = document.getElementById('searchTitle').value.toLowerCase();
            const sortBy = document.getElementById('sortBy').value;
            const hasImages = document.getElementById('hasImages').value;

            const postCards = Array.from(document.querySelectorAll('.post-card'));

            const filteredCards = postCards.filter(card => {
                let showCard = true;

                if (author && !card.dataset.author.toLowerCase().includes(author)) {
                    showCard = false;
                }

                if (title && !card.dataset.title.includes(title)) {
                    showCard = false;
                }

                if (hasImages === 'withImages' && card.dataset.hasImages !== 'true') {
                    showCard = false;
                } else if (hasImages === 'textOnly' && card.dataset.hasImages === 'true') {
                    showCard = false;
                }

                return showCard;
            });

            postCards.forEach(card => card.style.display = 'none');

            filteredCards.sort((a, b) => {
                switch(sortBy) {
                    case 'oldest':
                        return parseInt(a.dataset.date) - parseInt(b.dataset.date);
                    case 'mostLiked':
                        return parseInt(b.dataset.likes) - parseInt(a.dataset.likes);
                    case 'mostViewed':
                        return parseInt(b.dataset.views) - parseInt(a.dataset.views);
                    case 'title':
                        return a.dataset.title.localeCompare(b.dataset.title);
                    case 'newest':
                    default:
                        return parseInt(b.dataset.date) - parseInt(a.dataset.date);
                }
            });

            const container = document.getElementById('postsContainer');
            filteredCards.forEach(card => {
                card.style.display = '';
                container.appendChild(card);
            });

            updateNoResultsMessage(filteredCards.length === 0);
        }

        function updateNoResultsMessage(showMessage) {
            let noResultsDiv = document.getElementById('noResultsMessage');

            if (showMessage) {
                if (!noResultsDiv) {
                    noResultsDiv = document.createElement('div');
                    noResultsDiv.id = 'noResultsMessage';
                    noResultsDiv.className = 'text-center py-5 col-12';
                    noResultsDiv.innerHTML = `
                        <i class="fas fa-search fa-3x text-white mb-3"></i>
                        <h4 class="text-white">No posts match your filters</h4>
                        <p class="text-white">Try adjusting your search criteria</p>
                        <button class="btn btn-outline-primary bg-secondary" onclick="resetFilters()">
                            <i class="fas fa-undo me-2"></i>Reset Filters
                        </button>
                    `;
                    document.getElementById('postsContainer').appendChild(noResultsDiv);
                }
                noResultsDiv.style.display = '';
            } else {
                if (noResultsDiv) {
                    noResultsDiv.style.display = 'none';
                }
            }
        }

        function resetFilters() {
            document.getElementById('searchAuthor').value = '';
            document.getElementById('searchTitle').value = '';
            document.getElementById('sortBy').value = 'newest';
            document.getElementById('hasImages').value = '';
            applyFilters();
        }

        function toggleLike(button) {
            const postId = button.getAttribute('data-post-id');
            const isLiked = button.getAttribute('data-is-liked') === 'true';

            console.log('Toggle like called for post:', postId, 'Currently liked:', isLiked);

            const originalContent = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';

            const url = '@Url.Action("ToggleLike", "Posts")' + '?id=' + encodeURIComponent(postId);
            console.log('Sending request to:', url);

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                if (!response.ok) {
                    return response.text().then(text => {
                        console.log('Error response body:', text);
                        throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                    });
                }

                const contentType = response.headers.get('content-type');
                console.log('Content type:', contentType);

                if (!contentType || !contentType.includes('application/json')) {
                    return response.text().then(text => {
                        console.log('Non-JSON response:', text);
                        throw new Error('Server did not return JSON: ' + text);
                    });
                }

                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);

                if (data.success) {
                    button.setAttribute('data-is-liked', data.isLiked.toString());

                    if (data.isLiked) {
                        button.className = 'btn btn-sm me-2 like-btn btn-danger';
                    } else {
                        button.className = 'btn btn-sm me-2 like-btn btn-outline-danger';
                    }

                    const likeTextSpan = button.querySelector('.like-text');
                    if (likeTextSpan) {
                        likeTextSpan.textContent = data.isLiked ? 'Unlike' : 'Like';
                    } else {
                        button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${data.isLiked ? 'Unlike' : 'Like'}</span>`;
                    }

                    const likeCountSpan = document.querySelector(`.like-count[data-post-id="${postId}"] .count-number`);
                    if (likeCountSpan) {
                        likeCountSpan.textContent = data.likesCount;
                    } else {
                        console.warn('Like count span not found for post:', postId);
                    }

                    const postCard = button.closest('.post-card');
                    if (postCard) {
                        postCard.dataset.likes = data.likesCount;
                    }

                    showNotification('success', data.message);
                } else {
                    console.error('Server returned error:', data.message);
                    showNotification('error', data.message || 'Failed to toggle like');
                }

                button.disabled = false;
                if (!button.querySelector('.like-text')) {
                    const currentIsLiked = button.getAttribute('data-is-liked') === 'true';
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${currentIsLiked ? 'Unlike' : 'Like'}</span>`;
                } else {
                    button.innerHTML = originalContent;
                }

                const likeTextSpan = button.querySelector('.like-text');
                if (likeTextSpan) {
                    likeTextSpan.textContent = data.isLiked ? 'Unlike' : 'Like';
                } else {
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${data.isLiked ? 'Unlike' : 'Like'}</span>`;
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                console.error('Error details:', error.message);

                button.disabled = false;
                if (!button.querySelector('.like-text')) {
                    const currentIsLiked = button.getAttribute('data-is-liked') === 'true';
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${currentIsLiked ? 'Unlike' : 'Like'}</span>`;
                } else {
                    button.innerHTML = originalContent;
                }

                showNotification('error', error.message);
            });
        }

        function showNotification(type, message) {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }
    </script>
}

@* Add CSRF token for AJAX requests *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>