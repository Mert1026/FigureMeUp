@model IEnumerable<FigureMeUp.Data.Models.Post>
@{
    ViewData["Title"] = "All Posts";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-newspaper me-2 text-primary"></i>All Posts</h2>
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Create New Post
        </a>
    }
</div>

@if (Model.Any())
{
    <div class="row">
        <div class="col-lg-8">
            @foreach (var post in Model)
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div class="flex-grow-1">
                                <h4 class="card-title mb-2">
                                    <a asp-action="Details" asp-route-id="@post.Id" class="text-decoration-none">
                                        @post.Title
                                    </a>
                                </h4>
                                <div class="d-flex align-items-center text-muted small mb-2">
                                    <i class="fas fa-user me-1"></i>
                                    <span class="me-3">@(post.Publisher?.UserName ?? "Unknown")</span>
                                    <i class="fas fa-calendar me-1"></i>
                                    <span class="me-3">@post.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                            @if (User.Identity.IsAuthenticated && post.PublisherId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item" asp-action="Edit" asp-route-id="@post.Id">
                                                <i class="fas fa-edit me-2"></i>Edit
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deletePostModal@(post.Id)">
                                                <i class="fas fa-trash me-2"></i>Delete
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>

                        <p class="card-text">@post.Content</p>

                        @if (post.ImageUrls.Any())
                        {
                            <div class="row mb-3">
                                @if (post.ImageUrls.Count() == 1)
                                {
                                    <div class="col-12">
                                        <img src="@post.ImageUrls.First()" class="img-fluid rounded" alt="Post image" style="max-height: 400px; width: 100%; object-fit: cover;">
                                    </div>
                                }
                                else
                                {
                                    @foreach (var imageUrl in post.ImageUrls.Take(3))
                                    {
                                        <div class="col-md-4 mb-2">
                                            <img src="@imageUrl" class="img-fluid rounded" alt="Post image" style="height: 150px; width: 100%; object-fit: cover;">
                                        </div>
                                    }
                                    @if (post.ImageUrls.Count() > 3)
                                    {
                                        <div class="col-12 text-center mt-2">
                                            <small class="text-muted">+@(post.ImageUrls.Count() - 3) more images</small>
                                        </div>
                                    }
                                }
                            </div>
                        }

                        @if (post.Hashtags.Any())
                        {
                            <div class="mb-3">
                                @foreach (var hashtag in post.Hashtags)
                                {
                                    <span class="badge bg-secondary me-1">#@hashtag.Name</span>
                                }
                            </div>
                        }

                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <a asp-action="Details" asp-route-id="@post.Id" class="btn btn-primary btn-sm me-2">
                                    <i class="fas fa-eye me-1"></i>View Details
                                </a>

                                @if (User.Identity.IsAuthenticated)
                                {
                                    <button type="button"
                                            class="btn btn-sm me-2 like-btn @(post.LikedByUsersIds.Contains(currentUserId ?? "") ? "btn-danger" : "btn-outline-danger")"
                                            data-post-id="@post.Id"
                                            data-is-liked="@(post.LikedByUsersIds.Contains(currentUserId ?? "").ToString().ToLower())">
                                        <i class="fas fa-heart me-1"></i>
                                        <span class="like-text">@(post.LikedByUsersIds.Contains(currentUserId ?? "") ? "Unlike" : "Like")</span>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-danger btn-sm me-2" disabled>
                                        <i class="fas fa-heart me-1"></i>Like
                                    </button>
                                }

                                <span class="text-muted small like-count" data-post-id="@post.Id">
                                    <i class="fas fa-heart text-danger me-1"></i>
                                    <strong class="count-number">@(post.LikesCount)</strong>
                                    likes
                                </span>
                            </div>
                            <small class="text-muted">
                                <i class="fas fa-eye me-1"></i>@(post.ViewsCount) views
                            </small>
                        </div>
                    </div>
                </div>

                @if (User.Identity.IsAuthenticated && post.PublisherId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                {
                    <!-- Delete Confirmation Modal -->
                    <div class="modal fade" id="deletePostModal@(post.Id)" tabindex="-1" aria-labelledby="deletePostModalLabel@(post.Id)" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deletePostModalLabel@(post.Id)">Confirm Delete</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to delete the post "<strong>@post.Title</strong>"? This action cannot be undone.
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <form asp-action="Delete" asp-route-id="@post.Id" method="post" class="d-inline">
                                        <button type="submit" class="btn btn-danger">
                                            <i class="fas fa-trash me-1"></i>Delete
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="col-lg-4">
            <div class="card shadow-sm sticky-top" style="top: 20px;">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-info-circle me-2"></i>Community Guidelines
                    </h5>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled">
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Share quality content</li>
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Be respectful to others</li>
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use relevant hashtags</li>
                        <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Credit original creators</li>
                    </ul>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a asp-action="Create" class="btn btn-primary btn-sm w-100">
                            <i class="fas fa-plus me-2"></i>Create Post
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-newspaper fa-5x text-muted mb-4"></i>
        <h3 class="text-muted">No Posts Yet</h3>
        <p class="text-muted">Be the first to share something with the community!</p>
        @if (User.Identity.IsAuthenticated)
        {
            <a asp-action="Create" class="btn btn-primary btn-lg">
                <i class="fas fa-plus me-2"></i>Create Your First Post
            </a>
        }
        else
        {
            <a asp-area="Identity" asp-page="/Account/Register" class="btn btn-primary btn-lg">
                <i class="fas fa-user-plus me-2"></i>Join to Create Posts
            </a>
        }
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add click handlers to all like buttons
            document.querySelectorAll('.like-btn').forEach(button => {
                button.addEventListener('click', function() {
                    toggleLike(this);
                });
            });
        });

        function toggleLike(button) {
            const postId = button.getAttribute('data-post-id');
            const isLiked = button.getAttribute('data-is-liked') === 'true';

            console.log('Toggle like called for post:', postId, 'Currently liked:', isLiked);

            // Disable button to prevent multiple clicks
            const originalContent = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';

            // Construct URL with query parameter
            const url = '@Url.Action("ToggleLike", "Posts")' + '?id=' + encodeURIComponent(postId);
            console.log('Sending request to:', url);

            // Make AJAX call with GET method first to test
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                if (!response.ok) {
                    return response.text().then(text => {
                        console.log('Error response body:', text);
                        throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                    });
                }

                const contentType = response.headers.get('content-type');
                console.log('Content type:', contentType);

                if (!contentType || !contentType.includes('application/json')) {
                    return response.text().then(text => {
                        console.log('Non-JSON response:', text);
                        throw new Error('Server did not return JSON: ' + text);
                    });
                }

                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);

                if (data.success) {
                    // Update button state using data from server
                    button.setAttribute('data-is-liked', data.isLiked.toString());

                    // Update button appearance and text
                    if (data.isLiked) {
                        button.className = 'btn btn-sm me-2 like-btn btn-danger';
                    } else {
                        button.className = 'btn btn-sm me-2 like-btn btn-outline-danger';
                    }

                    // Update button text - check if like-text span exists
                    const likeTextSpan = button.querySelector('.like-text');
                    if (likeTextSpan) {
                        likeTextSpan.textContent = data.isLiked ? 'Unlike' : 'Like';
                    } else {
                        // If span doesn't exist, update the entire button content
                        button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${data.isLiked ? 'Unlike' : 'Like'}</span>`;
                    }

                    // Update like count with server data
                    const likeCountSpan = document.querySelector(`.like-count[data-post-id="${postId}"] .count-number`);
                    if (likeCountSpan) {
                        likeCountSpan.textContent = data.likesCount;
                    } else {
                        console.warn('Like count span not found for post:', postId);
                    }

                    // Show success notification
                    showNotification('success', data.message);
                } else {
                    console.error('Server returned error:', data.message);
                    // Show error notification
                    showNotification('error', data.message || 'Failed to toggle like');
                }

                // Re-enable button with original structure
                button.disabled = false;
                // Restore the original button structure if it was lost
                if (!button.querySelector('.like-text')) {
                    const currentIsLiked = button.getAttribute('data-is-liked') === 'true';
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${currentIsLiked ? 'Unlike' : 'Like'}</span>`;
                } else {
                    button.innerHTML = originalContent;
                }

                // Update button text - check if like-text span exists
                    const likeTextSpan = button.querySelector('.like-text');
                    if (likeTextSpan) {
                        likeTextSpan.textContent = data.isLiked ? 'Unlike' : 'Like';
                    } else {
                        // If span doesn't exist, update the entire button content
                        button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${data.isLiked ? 'Unlike' : 'Like'}</span>`;
                    }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                console.error('Error details:', error.message);

                // Re-enable button on error with proper structure
                button.disabled = false;
                // Restore the original button structure
                if (!button.querySelector('.like-text')) {
                    const currentIsLiked = button.getAttribute('data-is-liked') === 'true';
                    button.innerHTML = `<i class="fas fa-heart me-1"></i><span class="like-text">${currentIsLiked ? 'Unlike' : 'Like'}</span>`;
                } else {
                    button.innerHTML = originalContent;
                }

                // Show error notification with more details
                showNotification('error', error.message);
            });
        }

        // Helper function to show notifications (same as in LikedContent view)
        function showNotification(type, message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            // Add to page
            document.body.appendChild(notification);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }
    </script>
}

@* Add CSRF token for AJAX requests *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>